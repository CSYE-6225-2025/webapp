name: Deploy Web App on EC2 (AWS) and Run Integration Tests

on:
  pull_request_target:
    types: [closed]
    branches:
      - main

jobs:
  deploy_and_test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      # Existing Test Steps
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.12.0"

      - name: Install dependencies
        run: npm install

      - name: Create .env files
        run: |
          cat > .env.test.local << EOF
          PORT=${{ secrets.PORT }}
          MYSQL_DB=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.PORT }}
          EOF
          cat > .env << EOF
          PORT=${{ secrets.PORT }}
          MYSQL_DB=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          EOF

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for database connection..."
            sleep 2
          done

      - name: Run unit tests
        run: npm test

      # Build Application Artifact
      - name: Make zip
        run: zip -r webapp.zip .

      # Setup AWS CLI for DEV account
      - name: Configure AWS CLI for DEV account
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1

      - name: Validate AWS Credentials
        run: |
          aws sts get-caller-identity
      # Step 4: Run Packer to create EC2 instance (Make sure Packer is installed and configured)
      - name: Change directory & Initialize packer to create EC2 instance
        run: |
          cd packer
          packer init webapp.pkr.hcl

      # Validate Packer Template and Build AMI
      - name: Validate Packer Template
        run: |
          cd packer
          packer validate webapp.pkr.hcl

      - name: Build AMI with Packer
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd packer
          packer build \
            -var "aws_region=${{secrets.AWS_REGION}}" \
            -var "mysql_root_password=${{secrets.MYSQL_ROOT_PASSWORD}}" \
            -var "mysql_database=${{secrets.MYSQL_DATABASE}}" \
            webapp.pkr.hcl

      # Get the latest AMI ID (assuming it's output by Packer)
      - name: Get AMI ID
        id: ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
                  --executable-users self \
                  --filters "Name=name,Values=custom-aws-webapp-*" "Name=is-public,Values=false" \
                  --query "sort_by(Images, &CreationDate)[-1].ImageId" \
                  --output text)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT


      # Reconfigure AWS CLI for DEMO account
      - name: Configure AWS CLI for DEMO account
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}"
          aws configure set region ${{ secrets.AWS_REGION }}

      # Create new Launch Template version
      - name: Create Launch Template Version
        id: template
        run: |
            VERSION=$(aws ec2 create-launch-template-version \
              --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
              --source-version '$Latest' \
              --launch-template-data '{"ImageId":"${{ steps.ami.outputs.ami_id }}"}' \
              --query 'LaunchTemplateVersion.VersionNumber' \
              --output text)
            echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Trigger Instance Refresh
        # Step 8: update asg
      - name: Update ASG to use latest launch template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
            --launch-template "LaunchTemplateName=${{ secrets.LAUNCH_TEMPLATE }},Version=\$Latest"
          echo "ASG updated to use launch template version ${{ steps.template.outputs.version }}"


      - name: Start instance refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
            --query "InstanceRefreshId" --output text)
          echo "Started instance refresh with ID: $REFRESH_ID"
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT


      - name: Wait for instance refresh to complete
        run: |
          echo "Waiting for instance refresh to complete..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ secrets.AUTOSCALING_GROUP_NAME }}" \
              --instance-refresh-ids "${{ steps.start_refresh.outputs.refresh_id }}" \
              --query 'InstanceRefreshes[0].Status' --output text)
            echo "Refresh status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh succeeded."
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance refresh failed or cancelled."
              exit 1
            fi
            sleep 30
          done

              run: |
                echo "Waiting for instance refresh to complete..."
                while true; do
                  STATUS=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name "${{secrets.AUTOSCALING_GROUP_NAME}}" \
                    --instance-refresh-ids "$REFRESH_ID" \
                    --query 'InstanceRefreshes[0].Status' --output text)
                  echo "Refresh status: $STATUS"
                  if [[ "$STATUS" == "Successful" ]]; then
                    echo "Instance refresh succeeded."
                    exit 0
                  elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                    echo "Instance refresh failed or cancelled."
                    exit 1
                  fi
                  sleep 30
                done

name: Deploy Web App on EC2 (GCP) and Run Integration Tests

on:
  pull_request_target:
    types: [closed]
    branches:
      - main

jobs:
  deploy_and_test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.12.0'

      - name: Install dependencies
        run: npm install

      - name: Create .env file from GitHub Secrets
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env.test.local
          echo "MYSQL_DB=${{ secrets.MYSQL_DATABASE }}" >> .env.test.local
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env.test.local
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env.test.local
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env.test.local
          echo "MYSQL_PORT=${{ secrets.PORT }}" >> .env.test.local

      - name: Debug .env file
        run: cat .env.test.local


      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for database connection..."
            sleep 2
          done

      - name: Run tests
        run: npm test

      - name: Make zip
        run: zip -r webapp.zip .
      
      - name: list file after creating zip
        run: ls -1h

    # Step 2: Set up GCP CLI
      - name: Set up GCP CLI
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      
    # Step 2: Set up Google Cloud SDK and authenticate with service account
      - name: Set up Google Cloud credentials
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "${GOOGLE_APPLICATION_CREDENTIALS}" > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
      
      - name: Validate GCP Credentials
        run: |
          gcloud auth list
          gcloud projects list | grep ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Packer Plugin for Google Compute
        run: packer plugin install github.com/hashicorp/googlecompute


      # Step 4: Run Packer to create EC2 instance (Make sure Packer is installed and configured)
      - name: Change directory & Initialize packer to create EC2 instance
        run: |
          cd packer
          packer init webapp-gcp.pkr.hcl
      
      - name: Validate Packer
        run: |
          cd packer
          packer validate webapp-gcp.pkr.hcl

      # Step 5: Run Packer to create EC2 instance (Make sure Packer is installed and configured)
      - name: Run Packer to create EC2 instance
        env:
              GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
              GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
              MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
              MYSQL_DB: ${{ secrets.MYSQL_DATABASE }}

        run: |
            echo "$GCP_SERVICE_ACCOUNT_KEY" > gcp-key.json
            export GOOGLE_APPLICATION_CREDENTIALS="${{ github.workspace }}/gcp-key.json"  # Set the correct path here

            gcloud auth activate-service-account --key-file=GOOGLE_APPLICATION_CREDENTIALS
            gcloud config set project "$GCP_PROJECT_ID"

            cd packer
            packer build \
              -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
              -var "mysql_root_password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
              -var "mysql_db=${{ secrets.MYSQL_DATABASE }}" \
              webapp-gcp.pkr.hcl

